;;; -*- emacs-lisp -*-
(require 'catalogue-view)
(db-set-field-help database 'name "Must be non-empty textual string identifying the item."
                   'category "Must be non-empty textual string characterizing content category."
                   'unit "Must be positive non-zero integer value."
                   'set "Must be positive non-zero integer value."
                   'media "The correct value is usually automatically suggested for disks, but may be edited manually."
                   'owner "Should be filled only for alien items."
                   'place "One string placement description in free form."
                   'description "Multiline content description in free form")
(setq catalogue-display-format-path
      (list (expand-file-name (catalogue-language) (file-name-directory load-file-name))
            (directory-file-name (file-name-directory load-file-name))))
(setq dbf-format-name-spec-alist
      '(("empty" . "empty.fmt")
        ("native" . "collection.fmt")
        ("alien" . "alien.fmt")
        ("borrowed" . "borrowed.fmt")
        ("lended" . "lended.fmt")
        ("transit" . "transit.fmt")
        ("registration" . "register.fmt")
        ("edit" . "edit.fmt")
        ("operational" . "operational.fmt")))
(dbf-set-summary-format "\\name (\\unit/\\set)")
(add-hook 'db-after-read-hooks 'catalogue-setup)
(add-hook 'db-view-mode-hooks 'catalogue-view-setup)
(add-hook 'db-edit-mode-hooks 'catalogue-edit-setup)
(add-hook 'database-summary-mode-hooks 'catalogue-summary-setup)
(setq db-new-record-function 'catalogue-initialize-record)
(setq dbf-before-display-record-function 'catalogue-choose-display-format)
(setq dbf-every-change-function 'catalogue-validate-field-change)
(setq dbf-after-record-change-function 'catalogue-accept-record)
